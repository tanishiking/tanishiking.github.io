<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kotlin on Rikito Taniguchi</title><link>https://tanishiking.github.io/tags/kotlin/</link><description>Recent content in kotlin on Rikito Taniguchi</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Dec 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tanishiking.github.io/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploring WAT Files Generated from Kotlin/Wasm</title><link>https://tanishiking.github.io/posts/kotlin-wasm-deep-dive/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>https://tanishiking.github.io/posts/kotlin-wasm-deep-dive/</guid><description>In this article, I&amp;rsquo;m examining the generated WAT (WebAssembly Text) files from Kotlin/Wasm and investigating how high-level constructs in Kotlin map to WasmGC.
Generating WAT from Kotlin/Wasm # https://github.com/Kotlin/kotlin-wasm-examples
I&amp;rsquo;ll work with the kotlin-wasm-example/nodejs-example and inspecting the output. The version at the time of writing is Kotlin 1.9.20.
To generate WAT files, I&amp;rsquo;m passing the -Xwasm-generate-wat flag to the compiler1.
‚ùØ git diff nodejs-example/build.gradle.kts diff --git a/nodejs-example/build.gradle.kts b/nodejs-example/build.gradle.kts index 6b48777..fa21751 100644 --- a/nodejs-example/build.</description></item></channel></rss>